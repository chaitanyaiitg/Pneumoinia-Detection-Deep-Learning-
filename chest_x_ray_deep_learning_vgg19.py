# -*- coding: utf-8 -*-
"""Chest X-Ray - Deep Learning -VGG19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_d7CVMOa4bB02Ue517ZbdVCUWRH7zaIx
"""

! pip install pandas

! pip install tensorflow-gpu

!pip install keras

import matplotlib.pylab as plt
import numpy as np
import tensorflow_hub as hub
import tensorflow as tf
print("TF version:", tf.__version__)
print("Hub version:", hub.__version__)
print("GPU is", "available" if tf.test.is_gpu_available() else "NOT AVAILABLE")

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
#from tensorflow.keras.applications.resnet50 import ResNet50
#from tensorflow.keras.applications.resnet152V2 import ResNet152V2
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.applications.vgg19 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
from glob import glob

from google.colab import drive
drive.mount('/content/drive')

"""# New Section"""

IMAGE_SIZE = [224, 224]

train_path = '/content/drive/My Drive/Colab Notebooks/Chest_Xray/train'
valid_path = '/content/drive/My Drive/Colab Notebooks/Chest_Xray/test'

# Import the VGG19 library as shown below and add preprocessing layer to the front of VGG19",
# Here we will be using imagenet weights\n"
vgg= VGG19(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

# don't train existing weights\n",
for layer in vgg.layers:
    layer.trainable = False

# useful for getting number of output classes
folders = glob('/content/drive/My Drive/Colab Notebooks/Chest_Xray/train/*')
len(folders)

folders[0]

# our layers - you can add more if you want
x = Flatten()(vgg.output)

prediction=Dense(len(folders), activation='softmax')(x)

# create a model object
model = Model(inputs=vgg.input, outputs=prediction)

# view the structure of the model
model.summary()

model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

# Make sure you provide the same target size as initialied for the image size
training_set = train_datagen.flow_from_directory('/content/drive/My Drive/Colab Notebooks/Chest_Xray/train',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('/content/drive/My Drive/Colab Notebooks/Chest_Xray/test',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

# fit the model
# Run the cell. It will take some time to execute
r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=3,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

# plot the loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

# save it as a h5 file


from tensorflow.keras.models import load_model

model.save('Xray_model_vgg19.h5')

y_pred = model.predict(test_set)

y_pred

import numpy as np
y_pred = np.argmax(y_pred, axis=1)

y_pred

len(y_pred)

np.array(y_pred==0).sum()

from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

model=load_model('Xray_model_vgg19.h5')

img=image.load_img('/content/drive/My Drive/Colab Notebooks/Chest_Xray/val/PNEUMONIA/person1951_bacteria_4882.jpeg',target_size=(224,224))

img

y=image.img_to_array(img)
y

y.shape

y=np.expand_dims(y,axis=0)
y.shape



imgy=preprocess_input(y)
imgy.shape

imgy=imgy/255

preds= model.predict(imgy)
preds

a=np.argmax(preds, axis=1)
a

if(a==0):
    print("Normal")
else:
    print("Pneumonia")

